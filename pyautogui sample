import React, { useState, useEffect, useCallback } from 'react';
import './RhythmGame.css'; // Create a CSS file for font import

const styles = {
  container: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
    minHeight: '100vh',
    backgroundColor: '#111827',
    padding: '0',
    margin: '0',
    overflow: 'hidden'
  },
  score: {
    fontSize: '2rem',
    fontWeight: 'bold',
    color: 'white',
    marginBottom: '1rem',
    fontFamily: 'Arial, sans-serif'
  },
  gameWindow: {
    position: 'relative',
    width: '100vw', // Full viewport width
    height: '60vh', // 60% of viewport height
    backgroundColor: '#1F2937',
    borderRadius: '8px',
    overflow: 'hidden',
    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
  },
  target: {
    position: 'absolute',
    border: '4px solid #10B981',
    borderRadius: '50%',
    boxSizing: 'border-box',
    transition: 'box-shadow 0.3s ease-in-out' // Smooth transition for light-up effect
  },
  perfectZone: {
    position: 'absolute',
    backgroundColor: '#10B981',
    borderRadius: '50%',
    opacity: 0.3,
    left: '50%',
    top: '50%',
    transform: 'translate(-50%, -50%)'
  },
  ball: {
    position: 'absolute',
    backgroundColor: '#3B82F6',
    borderRadius: '50%',
    boxShadow: '0 0 20px rgba(59, 130, 246, 0.6)'
  },
  button: {
    marginTop: '1rem',
    padding: '0.5rem 1rem',
    backgroundColor: '#3B82F6',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontSize: '1rem',
    fontFamily: 'Arial, sans-serif'
  },
  greatText: {
    position: 'absolute',
    left: '50%',
    transform: 'translate(-50%, -150%)', // Starts higher and moves down
    fontSize: '3rem',
    fontWeight: 'bold',
    color: '#10B981',
    fontFamily: '"Luckiest Guy", cursive',
    opacity: 0,
    transition: 'opacity 0.3s ease-in-out, transform 0.3s ease-in-out',
    pointerEvents: 'none',
    textShadow: '0 0 10px rgba(16, 185, 129, 0.8), 0 0 20px rgba(16, 185, 129, 0.8)',
  },
  goodText: {
    position: 'absolute',
    left: '50%',
    transform: 'translate(-50%, -150%)', // Starts higher and moves down
    fontSize: '3rem',
    fontWeight: 'bold',
    color: 'grey',
    fontFamily: '"Luckiest Guy", cursive',
    opacity: 0,
    transition: 'opacity 0.3s ease-in-out, transform 0.3s ease-in-out',
    pointerEvents: 'none',
    textShadow: '0 0 10px rgba(128, 128, 128, 0.8), 0 0 20px rgba(128, 128, 128, 0.8)',
  },
};

const RhythmGame = () => {
  const [gameWindowSize, setGameWindowSize] = useState({
    width: window.innerWidth * 1, // Full viewport width
    height: window.innerHeight * 0.6 // 60% of viewport height
  });

  const GAME_WIDTH = gameWindowSize.width;
  const GAME_HEIGHT = gameWindowSize.height;
  const BALL_SIZE = 60; // Increased size of the ball
  const SLOT_SIZE = 100; // Increased size of the green circle
  const SLOT_POSITION = GAME_WIDTH - SLOT_SIZE - 260; // Move the green circle further left
  const INITIAL_BOUNCE_VELOCITY = -12.38; // Slightly lower bounce
  const PERFECT_HIT_RANGE = 35; // Increased collision range for easier hit
  const GRAVITY = 0.32; // Adjusted gravity for a more natural drop
  const HORIZONTAL_SPEED = 3; // Slower horizontal speed for smoother entry
  const START_HEIGHT = GAME_HEIGHT / 2 + 20; // Slightly lower than the middle of the screen

  const [balls, setBalls] = useState([]);
  const [score, setScore] = useState(0);
  const [gameActive, setGameActive] = useState(true);
  const [lastHitTime, setLastHitTime] = useState(0);
  const [lightUp, setLightUp] = useState(false); // State for light-up effect
  const [showGreatText, setShowGreatText] = useState(false); // State for "Great" text
  const [showGoodText, setShowGoodText] = useState(false); // State for "Good" text

  const handleKeyPress = useCallback((event) => {
    if (event.code === 'Space' && gameActive) {
      const currentTime = Date.now();
      if (currentTime - lastHitTime < 200) return;
      setLastHitTime(currentTime);

      // Check for each ball in the array
      balls.forEach((ball) => {
        const distanceFromSlot = Math.hypot(
          ball.x - (SLOT_POSITION + SLOT_SIZE / 2), // Center of the green circle
          ball.y - ((GAME_HEIGHT - SLOT_SIZE) / 2 - 30 + SLOT_SIZE / 2) // Center of the green circle (vertically)
        );

        if (distanceFromSlot < SLOT_SIZE / 2) { // Check if the ball is within the green circle
          if (distanceFromSlot < PERFECT_HIT_RANGE) {
            setScore(prev => prev + 100); // Add 100 points if inside the perfect hit range
            setLightUp(true); // Trigger light-up effect
            setShowGreatText(true); // Show "Great" text
            setTimeout(() => setLightUp(false), 300); // Reset light-up effect after 300ms
            setTimeout(() => setShowGreatText(false), 1000); // Hide "Great" text after 1 second
          } else {
            setScore(prev => prev + 50); // Add 50 points if inside the green circle but outside the perfect hit range
            setShowGoodText(true); // Show "Good" text
            setTimeout(() => setShowGoodText(false), 1000); // Hide "Good" text after 1 second
          }
        }
      });
    }
  }, [balls, gameActive, lastHitTime]);

  useEffect(() => {
    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [handleKeyPress]);

  useEffect(() => {
    const handleResize = () => {
      setGameWindowSize({
        width: window.innerWidth * 1, // Full viewport width
        height: window.innerHeight * 0.6 // 60% of viewport height
      });
    };

    window.addEventListener('resize', handleResize);

    return () => window.removeEventListener('resize', handleResize);
  }, []);

  useEffect(() => {
    if (!gameActive) return;

    // Add a new ball instantly when the game starts
    const ballInitialY = START_HEIGHT; // Start the ball slightly lower
    const ballInitialX = -BALL_SIZE; // Start the ball off-screen from the left

    // Set the velocity for the ball to fall straight down into the slot
    const velocityX = HORIZONTAL_SPEED; // Horizontal speed
    const velocityY = 0; // No initial vertical speed to make it fall straight

    setBalls((prevBalls) => [
      ...prevBalls,
      {
        id: Date.now(), // Unique ID based on current time
        x: ballInitialX,
        y: ballInitialY,
        velocity: { x: velocityX, y: velocityY }
      }
    ]);

    // Spawn a new ball every 4 seconds
    const intervalId = setInterval(() => {
      setBalls((prevBalls) => [
        ...prevBalls,
        {
          id: Date.now(), // Unique ID based on current time
          x: ballInitialX,
          y: ballInitialY,
          velocity: { x: velocityX, y: velocityY }
        }
      ]);
    }, 4000);

    return () => clearInterval(intervalId); // Cleanup interval on unmount
  }, [gameActive]);

  useEffect(() => {
    if (!gameActive) return;

    const gameLoop = setInterval(() => {
      setBalls((prevBalls) => {
        return prevBalls.map((ball) => {
          const newX = ball.x + ball.velocity.x;
          const newY = ball.y + ball.velocity.y;

          // Ball exits the screen and a new ball will be added
          if (newX > GAME_WIDTH) {
            return null; // Remove the ball when it exits the screen
          }

          // If the ball reaches the target, it should fall into it
          const distanceFromTarget = Math.hypot(
            newX - (SLOT_POSITION + SLOT_SIZE / 2),
            newY - (GAME_HEIGHT / 2)
          );

          return {
            ...ball,
            x: newX,
            y: Math.min(Math.max(newY, 0), GAME_HEIGHT - BALL_SIZE),
            velocity: {
              x: ball.velocity.x,
              y: newY >= GAME_HEIGHT - BALL_SIZE ? INITIAL_BOUNCE_VELOCITY : ball.velocity.y + GRAVITY
            }
          };
        }).filter(ball => ball !== null); // Remove null values (balls that exited)
      });
    }, 16);

    return () => clearInterval(gameLoop);
  }, [gameActive, GAME_WIDTH, GAME_HEIGHT]);

  return (
    <div style={styles.container}>
      <div style={styles.score}>Score: {score}</div>
      
      <div style={styles.gameWindow}>
        <div 
          style={{
            ...styles.target,
            left: SLOT_POSITION,
            top: (GAME_HEIGHT - SLOT_SIZE) / 2 - 30,
            width: SLOT_SIZE,
            height: SLOT_SIZE,
            boxShadow: lightUp ? '0 0 20px 10px rgba(16, 185, 129, 0.8)' : 'none' // Light-up effect
          }}
        >
          <div 
            style={{
              ...styles.perfectZone,
              width: PERFECT_HIT_RANGE * 2,
              height: PERFECT_HIT_RANGE * 2
            }}
          />
        </div>
        
        {balls.map((ball) => (
          <div
            key={ball.id}
            style={{
              ...styles.ball,
              left: ball.x,
              top: ball.y,
              width: BALL_SIZE,
              height: BALL_SIZE
            }}
          />
        ))}

        {/* "Great" text */}
        <div
          style={{
            ...styles.greatText,
            top: (GAME_HEIGHT - SLOT_SIZE) / 2 - 100, // Move 100px above green circle
            left: SLOT_POSITION + SLOT_SIZE / 2 , // Move 30px to the right
            opacity: showGreatText ? 1 : 0, // Fade in and out
            transform: showGreatText ? 'translate(-50%, -20px)' : 'translate(-50%, -50px)', // Moves downward when appearing
          }}
        >
          Great!
        </div>

        {/* "Good" text */}
        <div
          style={{
            ...styles.goodText,
            top: (GAME_HEIGHT - SLOT_SIZE) / 2 - 100, // Move 100px above green circle
            left: SLOT_POSITION + SLOT_SIZE / 2 , // Move 30px to the right
            opacity: showGoodText ? 1 : 0, // Fade in and out
            transform: showGoodText ? 'translate(-50%, -20px)' : 'translate(-50%, -50px)', // Moves downward when appearing
          }}
        >
          Good!
        </div>
      </div>
      
      <button 
        style={styles.button}
        onClick={() => setGameActive(!gameActive)}
      >
        {gameActive ? 'Pause' : 'Play'}
      </button>
    </div>
  );
};

export default RhythmGame;
